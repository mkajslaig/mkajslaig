c2hhcmVkLkF1dG9TZWxsID0gewogICAgV2ViaG9vayA9ICIiLAogICAgSG9wU2V0dGluZyA9IHsKICAgICAgICBFdmVyeVNlY29uZCA9IDEwLAogICAgICAgIE1pblBsYXllciA9IDYwMDAwLCAtLU1heCA2NQogICAgfSwKICAgIENoYXRTZXR0aW5nID0gewogICAgICAgIEFjdGl2ZSA9IHRydWUsCiAgICAgICAgRGVsYXkgPSAzMCwKICAgICAgICBMaXN0ID0geyJTZWxsIG1hY2UgY2FtZXJhd29tYW4gNTAwIGdlbSBpbiBtYXJrZXQgcGxhY2UifQogICAgfSwKICAgIFVuaXQgPSB7CiAgICAgICAgWyJNZXdpbmcgVFYgTWFuIl0gPSAxNTAsCiAgICAgICAgWyJUb3hpYyBVcGdyYWRlZCBUaXRhbiBDYW1lcmFtYW4iXSA9IDI1LAogICAgICAgIFsiTWFjZSBDYW1lcmF3b21hbiJdID0gNTAwLAogICAgICAgIFsiU2hpZWxkIENhbWVyYW1hbiJdID0gMTAxMTEsCiAgICAgICAgWyJSZWQgTGFzZXIgQ2FtZXJhbWFuIl0gPSA5OTk5OSwKICAgIH0KfQoKbG9jYWwgcGxyID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyCmxvY2FsIGd1aXNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIkd1aVNlcnZpY2UiKQpsb2NhbCB2aW0gPSBnYW1lOkdldFNlcnZpY2UoIlZpcnR1YWxJbnB1dE1hbmFnZXIiKQpsb2NhbCB0cHMgPSBnYW1lOkdldFNlcnZpY2UoJ1RlbGVwb3J0U2VydmljZScpCmxvY2FsIHZ1ID0gZ2FtZTpHZXRTZXJ2aWNlKCJWaXJ0dWFsVXNlciIpCgpyZXBlYXQgd2FpdCgpIHVudGlsIGdhbWU6SXNMb2FkZWQoKQoKaWYgZ2FtZS5QbGFjZUlkID09IDEzNzc1MjU2NTM2IHRoZW4KICAgIHdoaWxlIHdhaXQoKSBkbwogICAgICAgIHRwczpUZWxlcG9ydCgxNDY4MjkzOTk1MykKICAgIGVuZAplbmQKCndhaXQoMikKCnBsci5JZGxlZDpjb25uZWN0KGZ1bmN0aW9uKCkKICAgIHZ1OkJ1dHRvbjJEb3duKFZlY3RvcjIubmV3KDAsMCksd29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ0ZyYW1lKQogICAgd2FpdCgxKQogICAgdnU6QnV0dG9uMlVwKFZlY3RvcjIubmV3KDAsMCksd29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ0ZyYW1lKQplbmQpCgoKZnVuY3Rpb24gYWJsZVRvU2VsbFVuaXQoKQogICAgZm9yIGksIHYgaW4gcGFpcnMocGxyLlBsYXllckd1aS5Mb2JieS5NYXJrZXRwbGFjZUZyYW1lLk1hcmtldHBsYWNlTWFpbi5NYWluRnJhbWUuU2VsbFVuaXRNZW51LlNhbGVVbml0cy5TYWxlVW5pdHNMaXN0OkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgaWYgc3RyaW5nLmZpbmQodi5OYW1lLCAiUm93IikgYW5kIHYuUm93TG9ja2VkLlZpc2libGUgPT0gZmFsc2UgdGhlbgogICAgICAgICAgICBmb3IgZSwgZyBpbiBwYWlycyh2LlJvdzpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgaWYgc3RyaW5nLmZpbmQoZy5OYW1lLCAiU2xvdCIpIGFuZCBzdHJpbmcuZmluZChnLkdlbXNGcmFtZS5CZXN0UHJpY2UuVGV4dCwgIm4vYSIsIDEsIHRydWUpICB0aGVuCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAogICAgcmV0dXJuIGZhbHNlCmVuZAoKZnVuY3Rpb24gYWJsZVRvU2VsbFVuaXQyKCkKICAgIGxvY2FsIGEsIGIgPSBzdHJpbmcubWF0Y2gocGxyLlBsYXllckd1aS5Mb2JieS5NYXJrZXRwbGFjZUZyYW1lLk1hcmtldHBsYWNlTWFpbi5NYWluRnJhbWUuU2VsbFVuaXRNZW51LlRvdGFsVW5pdHNGb3JTYWxlLlVuaXRzRm9yU2FsZURpc3BsYXkuRGlzcGxheUZyYW1lLlVuaXRzQW1vdW50LlRleHQsICIoW14vXSspLyhbXi9dKykiKQogICAgcmV0dXJuIHRvbnVtYmVyKGEpIDwgdG9udW1iZXIoYikKZW5kCgpmdW5jdGlvbiBjYW5TZWxsVGhpc1VuaXQobmFtZSkKICAgIGZvciBpLCB2IGluIHBhaXJzKHNoYXJlZC5BdXRvU2VsbC5Vbml0KSBkbwogICAgICAgIGlmIHN0cmluZy5maW5kKGksIG5hbWUsIDEsIHRydWUpIHRoZW4KICAgICAgICAgICAgcmV0dXJuIHNoYXJlZC5BdXRvU2VsbC5Vbml0W2ldCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpsb2NhbCBkbCA9IGZhbHNlCmZ1bmN0aW9uIGNsaWNrR3VpKHBhdGgpCiAgICBpZiBkbCA9PSBmYWxzZSB0aGVuCiAgICAgICAgZGwgPSB0cnVlCiAgICAgICAgcHJpbnQocGF0aDpHZXRGdWxsTmFtZSgpKQogICAgICAgIGd1aXNlcnZpY2UuU2VsZWN0ZWRPYmplY3QgPSBwYXRoCiAgICAgICAgd2FpdCguMSkKICAgICAgICB2aW06U2VuZEtleUV2ZW50KHRydWUsIDEzLCBmYWxzZSwgZ2FtZSkKICAgICAgICB3YWl0KC4xKQogICAgICAgIHZpbTpTZW5kS2V5RXZlbnQoZmFsc2UsIDEzLCBmYWxzZSwgZ2FtZSkKICAgICAgICB3YWl0KC4xKQogICAgICAgIGd1aXNlcnZpY2UuU2VsZWN0ZWRPYmplY3QgPSBuaWwKICAgICAgICB3YWl0KC4yKQogICAgICAgIGRsID0gZmFsc2UKICAgIGVuZAplbmQKCmZ1bmN0aW9uIHdyaXRlR3VpKHBhdGgsIHRleHQpCiAgICBpZiBkbCA9PSBmYWxzZSB0aGVuCiAgICAgICAgZ3Vpc2VydmljZS5TZWxlY3RlZE9iamVjdCA9IHBhdGgKICAgICAgICB3YWl0KC4yKQogICAgICAgIHBhdGguVGV4dCA9IHRleHQKICAgICAgICB3YWl0KC4yKQogICAgICAgIHZpbTpTZW5kS2V5RXZlbnQodHJ1ZSwgMTMsIGZhbHNlLCBnYW1lKQogICAgICAgIHdhaXQoLjEpCiAgICAgICAgdmltOlNlbmRLZXlFdmVudChmYWxzZSwgMTMsIGZhbHNlLCBnYW1lKQogICAgICAgIHdhaXQoLjIpCiAgICAgICAgZ3Vpc2VydmljZS5TZWxlY3RlZE9iamVjdCA9IG5pbAogICAgICAgIHdhaXQoLjIpCiAgICAgICAgcGF0aC5UZXh0ID0gdGV4dAogICAgICAgIHdhaXQoLjIpCiAgICBlbmQKZW5kCgpzcGF3bihmdW5jdGlvbigpCiAgICB3aGlsZSB3YWl0KCkgZG8KICAgICAgICBpZiBzaGFyZWQuQXV0b1NlbGwuQ2hhdFNldHRpbmcuQWN0aXZlIHRoZW4KICAgICAgICAgICAgZ2FtZS5SZXBsaWNhdGVkU3RvcmFnZS5EZWZhdWx0Q2hhdFN5c3RlbUNoYXRFdmVudHMuU2F5TWVzc2FnZVJlcXVlc3Q6RmlyZVNlcnZlcihzaGFyZWQuQXV0b1NlbGwuQ2hhdFNldHRpbmcuTGlzdFttYXRoLnJhbmRvbSgxLCAjc2hhcmVkLkF1dG9TZWxsLkNoYXRTZXR0aW5nLkxpc3QpXSwgIkFsbCIpCiAgICAgICAgICAgIHdhaXQoc2hhcmVkLkF1dG9TZWxsLkNoYXRTZXR0aW5nLkRlbGF5KQogICAgICAgIGVuZAogICAgZW5kCmVuZCkKCnNwYXduKGZ1bmN0aW9uKCkKICAgIHdoaWxlIHdhaXQoc2hhcmVkLkF1dG9TZWxsLkhvcFNldHRpbmcuRXZlcnlTZWNvbmQpIGRvCiAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICBsb2NhbCBQbGFjZUlEID0gZ2FtZS5QbGFjZUlkCiAgICAgICAgICAgIGxvY2FsIEFsbElEcyA9IHt9CiAgICAgICAgICAgIGxvY2FsIGZvdW5kQW55dGhpbmcgPSAiIgogICAgICAgICAgICBsb2NhbCBhY3R1YWxIb3VyID0gb3MuZGF0ZSgiISp0IikuaG91cgogICAgICAgICAgICBsb2NhbCBEZWxldGVkID0gZmFsc2UKICAgICAgICAgICAgbG9jYWwgRmlsZSA9IHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIEFsbElEcyA9IGdhbWU6R2V0U2VydmljZSgnSHR0cFNlcnZpY2UnKTpKU09ORGVjb2RlKHJlYWRmaWxlKCJOb3RTYW1lU2VydmVycy5qc29uIikpCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgaWYgbm90IEZpbGUgdGhlbgogICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KEFsbElEcywgYWN0dWFsSG91cikKICAgICAgICAgICAgICAgIHdyaXRlZmlsZSgiTm90U2FtZVNlcnZlcnMuanNvbiIsIGdhbWU6R2V0U2VydmljZSgnSHR0cFNlcnZpY2UnKTpKU09ORW5jb2RlKEFsbElEcykpCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBmdW5jdGlvbiBUUFJldHVybmVyKCkKICAgICAgICAgICAgICAgIGxvY2FsIFNpdGU7CiAgICAgICAgICAgICAgICBpZiBmb3VuZEFueXRoaW5nID09ICIiIHRoZW4KICAgICAgICAgICAgICAgICAgICBTaXRlID0gZ2FtZS5IdHRwU2VydmljZTpKU09ORGVjb2RlKGdhbWU6SHR0cEdldCgnaHR0cHM6Ly9nYW1lcy5yb2Jsb3guY29tL3YxL2dhbWVzLycgLi4gUGxhY2VJRCAuLiAnL3NlcnZlcnMvUHVibGljP3NvcnRPcmRlcj1Bc2MmbGltaXQ9MTAwJykpCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgU2l0ZSA9IGdhbWUuSHR0cFNlcnZpY2U6SlNPTkRlY29kZShnYW1lOkh0dHBHZXQoJ2h0dHBzOi8vZ2FtZXMucm9ibG94LmNvbS92MS9nYW1lcy8nIC4uIFBsYWNlSUQgLi4gJy9zZXJ2ZXJzL1B1YmxpYz9zb3J0T3JkZXI9QXNjJmxpbWl0PTEwMCZjdXJzb3I9JyAuLiBmb3VuZEFueXRoaW5nKSkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgbG9jYWwgSUQgPSAiIgogICAgICAgICAgICAgICAgaWYgU2l0ZS5uZXh0UGFnZUN1cnNvciBhbmQgU2l0ZS5uZXh0UGFnZUN1cnNvciB
